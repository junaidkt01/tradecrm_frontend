import { useState } from "react";
import VerifyButton from "../Buttons/VerifyButton/VerifyButton"
import { useUsers } from "../../Hooks/useUsers";
import "./TableComponent.css"
import { menuPopupContents } from "../../utils/usersMenuPopup";

const TableComponent = ({ toggleMenuPopup }: { toggleMenuPopup: (menuType: string, userData: { userId: string | number, name: string }) => void }) => {

    const [isMenuOpen, setIsMenuOpen] = useState<number | boolean>(false);

    const handleTogglePopup = (menuType: string, userData: { userId: number | string, name: string }) => {
        toggleMenuPopup(menuType, userData)
        setIsMenuOpen(!isMenuOpen);
    }

    const handleMenuOpen = (value: number) => {
        setIsMenuOpen(value === isMenuOpen ? false : value);
    };

    const { fetchUsers, deleteUser, updateUser } = useUsers("/")

    if (fetchUsers.isLoading || fetchUsers.error) {
        return <h1>loading</h1>
    }

    const handleDeleteUser = (id: number | string | null) => {
        deleteUser.mutate(id);
    }

    const handleEditStatus = (id: any, currentStatus: boolean) => {
        updateUser.mutate({ id, updatedUser: { status: !currentStatus } });
    }

    return (
        <div className="table-component">
            <table border={1}>
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Settings</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        // tableData.map((item, i) => <tr key={i} >
                        fetchUsers?.data?.map((item, i) => <tr key={i} >
                            <td>{item.created_at}</td>
                            <td>{item.first_name}{" "}{item.last_name}</td>
                            <td>{item.email}</td>
                            <td className="table-btn" >
                                <VerifyButton onClick={() => handleEditStatus(item.id, item.status)} isVerify={item.status} />
                                {/* <VerifyButton onClick={handleFilterClick} isVerify={i === activeFilterIndex} /> */}
                            </td>
                            <td className="table-btn" style={{ position: "relative" }}>
                                <svg className={`${isMenuOpen === i ? "active" : ""} settings`} onClick={() => handleMenuOpen(i)} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M18.75 12.75H20.25C20.4489 12.75 20.6397 12.671 20.7803 12.5303C20.921 12.3897 21 12.1989 21 12C21 11.8011 20.921 11.6103 20.7803 11.4697C20.6397 11.329 20.4489 11.25 20.25 11.25H18.75C18.5511 11.25 18.3603 11.329 18.2197 11.4697C18.079 11.6103 18 11.8011 18 12C18 12.1989 18.079 12.3897 18.2197 12.5303C18.3603 12.671 18.5511 12.75 18.75 12.75ZM12 6C12 5.80109 12.079 5.61032 12.2197 5.46967C12.3603 5.32902 12.5511 5.25 12.75 5.25H20.25C20.4489 5.25 20.6397 5.32902 20.7803 5.46967C20.921 5.61032 21 5.80109 21 6C21 6.19891 20.921 6.38968 20.7803 6.53033C20.6397 6.67098 20.4489 6.75 20.25 6.75H12.75C12.5511 6.75 12.3603 6.67098 12.2197 6.53033C12.079 6.38968 12 6.19891 12 6ZM12 18C12 17.8011 12.079 17.6103 12.2197 17.4697C12.3603 17.329 12.5511 17.25 12.75 17.25H20.25C20.4489 17.25 20.6397 17.329 20.7803 17.4697C20.921 17.6103 21 17.8011 21 18C21 18.1989 20.921 18.3897 20.7803 18.5303C20.6397 18.671 20.4489 18.75 20.25 18.75H12.75C12.5511 18.75 12.3603 18.671 12.2197 18.5303C12.079 18.3897 12 18.1989 12 18ZM3.75 6.75H5.25C5.44891 6.75 5.63968 6.67098 5.78033 6.53033C5.92098 6.38968 6 6.19891 6 6C6 5.80109 5.92098 5.61032 5.78033 5.46967C5.63968 5.32902 5.44891 5.25 5.25 5.25H3.75C3.55109 5.25 3.36032 5.32902 3.21967 5.46967C3.07902 5.61032 3 5.80109 3 6C3 6.19891 3.07902 6.38968 3.21967 6.53033C3.36032 6.67098 3.55109 6.75 3.75 6.75ZM5.25 18.75H3.75C3.55109 18.75 3.36032 18.671 3.21967 18.5303C3.07902 18.3897 3 18.1989 3 18C3 17.8011 3.07902 17.6103 3.21967 17.4697C3.36032 17.329 3.55109 17.25 3.75 17.25H5.25C5.44891 17.25 5.63968 17.329 5.78033 17.4697C5.92098 17.6103 6 17.8011 6 18C6 18.1989 5.92098 18.3897 5.78033 18.5303C5.63968 18.671 5.44891 18.75 5.25 18.75ZM3 12C3 11.8011 3.07902 11.6103 3.21967 11.4697C3.36032 11.329 3.55109 11.25 3.75 11.25H11.25C11.4489 11.25 11.6397 11.329 11.7803 11.4697C11.921 11.6103 12 11.8011 12 12C12 12.1989 11.921 12.3897 11.7803 12.5303C11.6397 12.671 11.4489 12.75 11.25 12.75H3.75C3.55109 12.75 3.36032 12.671 3.21967 12.5303C3.07902 12.3897 3 12.1989 3 12ZM9 3.75C8.40326 3.75 7.83097 3.98705 7.40901 4.40901C6.98705 4.83097 6.75 5.40326 6.75 6C6.75 6.59674 6.98705 7.16903 7.40901 7.59099C7.83097 8.01295 8.40326 8.25 9 8.25C9.59674 8.25 10.169 8.01295 10.591 7.59099C11.0129 7.16903 11.25 6.59674 11.25 6C11.25 5.40326 11.0129 4.83097 10.591 4.40901C10.169 3.98705 9.59674 3.75 9 3.75ZM12.75 12C12.75 11.4033 12.9871 10.831 13.409 10.409C13.831 9.98705 14.4033 9.75 15 9.75C15.5967 9.75 16.169 9.98705 16.591 10.409C17.0129 10.831 17.25 11.4033 17.25 12C17.25 12.5967 17.0129 13.169 16.591 13.591C16.169 14.0129 15.5967 14.25 15 14.25C14.4033 14.25 13.831 14.0129 13.409 13.591C12.9871 13.169 12.75 12.5967 12.75 12ZM9 15.75C8.40326 15.75 7.83097 15.9871 7.40901 16.409C6.98705 16.831 6.75 17.4033 6.75 18C6.75 18.5967 6.98705 19.169 7.40901 19.591C7.83097 20.0129 8.40326 20.25 9 20.25C9.59674 20.25 10.169 20.0129 10.591 19.591C11.0129 19.169 11.25 18.5967 11.25 18C11.25 17.4033 11.0129 16.831 10.591 16.409C10.169 15.9871 9.59674 15.75 9 15.75Z" fill="#1E1F24" />
                                </svg>

                                {isMenuOpen === i && <div className="users-menus-wrapper">
                                    {
                                        menuPopupContents.map((menu, i) => <div onClick={() => handleTogglePopup(menu.title, { userId: item?.id, name: item?.first_name })} key={i} className="users-menu">
                                            <div dangerouslySetInnerHTML={{ __html: menu.icon }} />
                                            <p>{menu.title}</p>
                                        </div>)
                                    }
                                </div>}
                            </td>
                            <td className="table-btn" >
                                <svg onClick={() => handleDeleteUser(item?.id)} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path fillRule="evenodd" clipRule="evenodd" d="M16.5 4.47801V4.70501C17.799 4.8238 19.0927 4.9946 20.378 5.21701C20.4751 5.23382 20.5678 5.26958 20.6511 5.32225C20.7343 5.37491 20.8063 5.44346 20.8631 5.52397C20.9198 5.60448 20.9601 5.69537 20.9817 5.79146C21.0033 5.88755 21.0058 5.98696 20.989 6.08401C20.9722 6.18106 20.9364 6.27384 20.8838 6.35707C20.8311 6.4403 20.7626 6.51233 20.682 6.56907C20.6015 6.62581 20.5106 6.66613 20.4146 6.68774C20.3185 6.70935 20.2191 6.71182 20.122 6.69501L19.913 6.66001L18.908 19.73C18.8501 20.4836 18.5098 21.1875 17.9553 21.7011C17.4008 22.2146 16.6728 22.5 15.917 22.5H8.08401C7.3282 22.5 6.60026 22.2146 6.04573 21.7011C5.4912 21.1875 5.15095 20.4836 5.09301 19.73L4.08701 6.66001L3.87801 6.69501C3.78096 6.71182 3.68155 6.70935 3.58546 6.68774C3.48937 6.66613 3.39847 6.62581 3.31796 6.56907C3.15537 6.45449 3.04495 6.28 3.01101 6.08401C2.97706 5.88801 3.02236 5.68656 3.13694 5.52397C3.25153 5.36137 3.42601 5.25096 3.62201 5.21701C4.90727 4.99433 6.20099 4.82353 7.50001 4.70501V4.47801C7.50001 2.91401 8.71301 1.57801 10.316 1.52701C11.4387 1.49108 12.5623 1.49108 13.685 1.52701C15.288 1.57801 16.5 2.91401 16.5 4.47801ZM10.364 3.02601C11.4547 2.99113 12.5463 2.99113 13.637 3.02601C14.39 3.05001 15 3.68401 15 4.47801V4.59101C13.0018 4.46966 10.9982 4.46966 9.00001 4.59101V4.47801C9.00001 3.68401 9.60901 3.05001 10.364 3.02601ZM10.009 8.97101C10.0052 8.87252 9.98203 8.77574 9.94082 8.6862C9.89961 8.59667 9.84117 8.51612 9.76883 8.44917C9.69649 8.38222 9.61168 8.33017 9.51923 8.296C9.42678 8.26183 9.3285 8.2462 9.23001 8.25001C9.13152 8.25382 9.03474 8.27699 8.9452 8.3182C8.85567 8.35941 8.77512 8.41785 8.70817 8.49019C8.64122 8.56252 8.58917 8.64734 8.555 8.73979C8.52083 8.83224 8.5052 8.93052 8.50901 9.02901L8.85601 18.029C8.8637 18.2278 8.95004 18.4154 9.09604 18.5505C9.16833 18.6174 9.25309 18.6694 9.34548 18.7036C9.43787 18.7377 9.53608 18.7533 9.63451 18.7495C9.73293 18.7457 9.82964 18.7225 9.91912 18.6814C10.0086 18.6402 10.0891 18.5818 10.156 18.5095C10.2229 18.4372 10.2749 18.3524 10.3091 18.26C10.3432 18.1676 10.3588 18.0694 10.355 17.971L10.009 8.97101ZM15.489 9.02901C15.4963 8.92863 15.4834 8.82779 15.4509 8.73252C15.4185 8.63725 15.3672 8.54948 15.3001 8.47445C15.233 8.39942 15.1515 8.33866 15.0604 8.2958C14.9694 8.25293 14.8706 8.22883 14.77 8.22494C14.6694 8.22104 14.5691 8.23743 14.475 8.27313C14.3809 8.30883 14.2949 8.3631 14.2222 8.43272C14.1496 8.50234 14.0916 8.58587 14.0519 8.67835C14.0122 8.77083 13.9915 8.87036 13.991 8.97101L13.644 17.971C13.6363 18.1699 13.708 18.3637 13.8432 18.5098C13.9784 18.6559 14.1661 18.7423 14.365 18.75C14.5639 18.7577 14.7577 18.6861 14.9038 18.5508C15.0499 18.4156 15.1363 18.2279 15.144 18.029L15.489 9.02901Z" fill="#62636C" />
                                </svg>
                            </td>
                        </tr>
                        )
                    }
                </tbody>
            </table>
        </div>
    )
}

export default TableComponent
